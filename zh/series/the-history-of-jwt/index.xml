<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>The history of JWT on CORNER</title><link>https://trip.noimpty.love/zh/series/the-history-of-jwt/</link><description>Recent content in The history of JWT on CORNER</description><generator>Hugo -- gohugo.io</generator><language>zh</language><managingEditor>celeste.anchor@gmail.com (trip.)</managingEditor><webMaster>celeste.anchor@gmail.com (trip.)</webMaster><copyright>2023 GuangzhengLi All rights reserved</copyright><lastBuildDate>Wed, 17 Jan 2024 21:23:15 +0800</lastBuildDate><atom:link href="https://trip.noimpty.love/zh/series/the-history-of-jwt/index.xml" rel="self" type="application/rss+xml"/><item><title>JWT 的前世今生</title><link>https://trip.noimpty.love/zh/blog/zh/jwt%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/</link><pubDate>Wed, 17 Jan 2024 21:23:15 +0800</pubDate><author>celeste.anchor@gmail.com (trip.)</author><guid>https://trip.noimpty.love/zh/blog/zh/jwt%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/</guid><description>&lt;h1 id="jwt-的前世今生">JWT 的前世今生&lt;/h1>
&lt;h2 id="发展史">发展史&lt;/h2>
&lt;ul>
&lt;li>在 Web 发展史中, 浏览器和服务器之间的是通过 HTTP 协议交流的, 但 HTTP 协议最重要的特点之一就是无状态&lt;/li>
&lt;li>最开始 Web 基本就是文档的浏览, 所以服务端无需知道是谁在请求, 客户端每次请求都是一个新的 HTTP 协议&lt;/li>
&lt;li>随着交互式 Web 应用的兴起, 例如购物商城网站, 社区形式的网站… 都是这些需要登录的网站, 我们要知道哪些人买了哪些商品,
哪些人往自己的购物车放了哪些商品…&lt;/li>
&lt;li>由于 HTTP 是无状态的协议, 一旦客户端和服务器的数据交换完毕, 就会断开连接, 再次请求, 会重新连接,
这就说明服务器单从网络连接上是没有办法知道用户身份的。为了解决这个问题, 就给每次新的用户请求时, 发一个身份证,
每次访问都要带上身份证, 这样服务器就知道是谁来访问了, 针对不同的用户做出不同的响应。&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>会话跟踪是Web程序中常用的技术, 用来跟踪用户的整个会话。
常用的会话跟踪技术是Cookie与Session。Cookie 通过在客户端记录信息确定用户身份, Session 通过在服务器端记录信息确定用户身份。&lt;/p>
&lt;/blockquote>
&lt;h2 id="cookid-和-session">Cookid 和 Session&lt;/h2>
&lt;h3 id="cookie">Cookie&lt;/h3>
&lt;ul>
&lt;li>HTTP Cookie(也叫 Web Cookie或浏览器 Cookie)是服务器发送到用户浏览器并保存在本地的一小块数据,
它会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上。&lt;/li>
&lt;li>通常, 它用于告知服务端两个请求是否来自同一浏览器, 如保持用户的登录状态。Cookie 使基于无状态的 HTTP 协议记录稳定的状态信息成为了可能&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>cookie 是浏览器访问服务器后, 服务器传给浏览器的一段数据, 是浏览器提供的一种机制。
浏览器需要保存这段数据, 不得轻易删除。
此后每次浏览器访问该服务器, 都必须带上这段数据。&lt;/p>
&lt;/blockquote>
&lt;h4 id="创建和删除">创建和删除&lt;/h4>
&lt;ul>
&lt;li>当前 Cookie 有两个版本, 分别对应两种设置响应头&lt;code>Set-Cookie&lt;/code>和&lt;code>Set-Cookie2&lt;/code>。&lt;/li>
&lt;li>在 Servlet 中并不支持 &lt;code>Set-Cookie2&lt;/code>, 所以这里只说 &lt;code>Set-Cookie&lt;/code>(详见Set-Cookie
MDN)：&lt;code>Set-Cookie: value[; expires=date][; domain=domain][; path=path][; secure]&lt;/code>&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>属性&lt;/th>
&lt;th style="text-align:center">属性介绍&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Set-Cookie: &lt;!-- raw HTML omitted -->=&lt;!-- raw HTML omitted -->&lt;/td>
&lt;td style="text-align:center">1.键值对, 可以设置保存的 Key/Value, 这里 NAME 不能和其他属性项名字一样 &lt;!-- raw HTML omitted -->2. name=value 键值对, 设置 cookie 的名称及相对应的值, 都必须是字符串类型,如果值为 Unicode 字符, 需要为字符编码。如果值为二进制数据, 则需要使用 BASE64 编码。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Set-Cookie: &lt;!-- raw HTML omitted -->=&lt;!-- raw HTML omitted -->; Expires=&lt;!-- raw HTML omitted -->&lt;/td>
&lt;td style="text-align:center">过期时间, 在这个时间点后 cookie 失效, 形式为符合 HTTP-date 规范的时间戳&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Set-Cookie: &lt;!-- raw HTML omitted -->=&lt;!-- raw HTML omitted -->; Max-Age=&lt;!-- raw HTML omitted -->&lt;/td>
&lt;td style="text-align:center">1. 在 cookie 失效之前需要经过的秒数。一位或多位非零(1-9)数字。假如二者 (指 Expires 和 Max-Age) 均存在, 那么 Max-Age 优先级更高。&lt;!-- raw HTML omitted -->2. cookie 失效的时间, 单位秒。如果为整数, 则该 cookie 在 maxAge 秒后失效。如果为负数, 该 cookie 为临时 cookie , 关闭浏览器即失效, 浏览器也不会以任何形式保存该 cookie 。如果为 0, 表示删除该 cookie , 默认为 -1。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Set-Cookie: &lt;!-- raw HTML omitted -->=&lt;!-- raw HTML omitted -->; Domain=&lt;!-- raw HTML omitted -->&lt;/td>
&lt;td style="text-align:center">生成cookie域名,指定 cookie 可以送达的主机名。假如没有指定, 那么默认值为当前文档访问地址中的主机部分(但是不包含子域名)。默认是当前域名。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Set-Cookie: &lt;!-- raw HTML omitted -->=&lt;!-- raw HTML omitted -->; Path=&lt;!-- raw HTML omitted -->&lt;/td>
&lt;td style="text-align:center">cookie 在哪个路径(路由)下生效, 指定一个 URL 路径, 默认是 ‘/’。如果设置为 /abc, 则只有 /abc 下的路由可以访问到该 cookie, 如：/abc/read。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Set-Cookie: &lt;!-- raw HTML omitted -->=&lt;!-- raw HTML omitted -->; Secure&lt;/td>
&lt;td style="text-align:center">加密设置, cookie只有在请求使用安全协议SSL或者HTTPS的时候才会被发送到服务器；默认为false。(注意：非安全站点(http:)已经不能再在 cookie 中设置 secure 指令了)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Set-Cookie: &lt;!-- raw HTML omitted -->=&lt;!-- raw HTML omitted -->; HttpOnly&lt;/td>
&lt;td style="text-align:center">1. 设置了 HttpOnly 属性的 cookie 不能使用 JavaScript 经由 Document.cookie 属性、XMLHttpRequest 和 RequestAPIs 进行访问, 以防范跨站脚本攻击(XSS)。&lt;!-- raw HTML omitted -->2. 如果给某个 cookie 设置了 httpOnly 属性, 但还是能通过 Application 中手动修改 cookie, 所以只是在一定程度上可以防止 XSS 攻击, 不是绝对的安全.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h5 id="创建">创建&lt;/h5>
&lt;ol>
&lt;li>通过 &lt;code>Set-Cookie&lt;/code> 响应头创建
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Java" data-lang="Java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#66d9ef">true&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> response.&lt;span style="color:#a6e22e">setHeader&lt;/span>(&lt;span style="color:#960050;background-color:#1e0010">&amp;#39;&lt;/span>Set&lt;span style="color:#f92672">-&lt;/span>Cookie&lt;span style="color:#960050;background-color:#1e0010">&amp;#39;&lt;/span>, &lt;span style="color:#960050;background-color:#1e0010">`&lt;/span>login_email&lt;span style="color:#f92672">=&lt;/span>${email}&lt;span style="color:#960050;background-color:#1e0010">`&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> response.&lt;span style="color:#a6e22e">statusCode&lt;/span> &lt;span style="color:#f92672">=&lt;/span> 200
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> response.&lt;span style="color:#a6e22e">write&lt;/span>(&lt;span style="color:#960050;background-color:#1e0010">&amp;#39;&lt;/span>success&lt;span style="color:#960050;background-color:#1e0010">&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>node 中的 cookie 操作
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Shell" data-lang="Shell">&lt;span style="display:flex;">&lt;span>const Koa &lt;span style="color:#f92672">=&lt;/span> require&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#39;koa&amp;#39;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>const Router &lt;span style="color:#f92672">=&lt;/span> require&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#39;koa-router&amp;#39;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>const static &lt;span style="color:#f92672">=&lt;/span> require&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#39;koa-static&amp;#39;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>const app &lt;span style="color:#f92672">=&lt;/span> new Koa&lt;span style="color:#f92672">()&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>const router &lt;span style="color:#f92672">=&lt;/span> new Router&lt;span style="color:#f92672">()&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>app.use&lt;span style="color:#f92672">(&lt;/span>static&lt;span style="color:#f92672">(&lt;/span>__dirname,&lt;span style="color:#e6db74">&amp;#39;/&amp;#39;&lt;/span>&lt;span style="color:#f92672">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>router.get&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#39;/&amp;#39;&lt;/span>,async ctx&lt;span style="color:#f92672">=&lt;/span>&amp;gt;&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> //观察cookie存在
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> console.log&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#39;cookie:&amp;#39;&lt;/span>,ctx.header.cookie&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> //设置cookie
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ctx.set&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#39;Set-Cookie&amp;#39;&lt;/span>,&lt;span style="color:#e6db74">&amp;#39;cookie1=1234&amp;#39;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">})&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>app.use&lt;span style="color:#f92672">(&lt;/span>router.routes&lt;span style="color:#f92672">())&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>app.listen&lt;span style="color:#f92672">(&lt;/span>1024,&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">=&lt;/span>&amp;gt; &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> console.log&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#39;1024已开启&amp;#39;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">})&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>Javascript 操作 cookie
&lt;ul>
&lt;li>目前 document.cookie 对 cookie 的操作很不友好, 所以在项目中一般会引入第三方插件库来操作 cookie&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Javascript" data-lang="Javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">dates&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">new&lt;/span> Date();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">dates&lt;/span>.&lt;span style="color:#a6e22e">setDate&lt;/span>(&lt;span style="color:#a6e22e">dates&lt;/span>.&lt;span style="color:#a6e22e">getDate&lt;/span>()&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">3&lt;/span>); &lt;span style="color:#75715e">// 按天数设置
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>document.&lt;span style="color:#a6e22e">cookie&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">”&lt;/span>&lt;span style="color:#a6e22e">user1&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#a6e22e">YY&lt;/span>; &lt;span style="color:#a6e22e">expires&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">”&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#a6e22e">dates&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="..%2F..%2F..%2Fstatic%2Fimages%2FJWT%2Fcookie_add.png" alt="cookie_add.png">&lt;/p>
&lt;h5 id="删除">删除&lt;/h5>
&lt;ul>
&lt;li>修改 cookie 有效期, 使有效期早于当前时间, 就可以删除 cookie
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Javascript" data-lang="Javascript">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">delete_cookie&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span>(&lt;span style="color:#a6e22e">name&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> document.&lt;span style="color:#a6e22e">cookie&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#39;=;expires=Thu, 01 Jan 1970 00:00:01 GMT;&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h4 id="domain-的应用">Domain 的应用&lt;/h4>
&lt;ul>
&lt;li>以公司内部统一 Auth 登录中心为例&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>假设现在有两个域名：&lt;/p>
&lt;ul>
&lt;li>域名 A: a.test.f.com.cn&lt;/li>
&lt;li>域名 B: b.test.f.com.cn&lt;/li>
&lt;/ul>
&lt;p>显然, 域名 A 和域名 B 都是 f.com.cn 的子域名&lt;/p>
&lt;ol>
&lt;li>如果我们在域名 A 中的 cookie 的domain设置为 f.com.cn, 那么 f.com.cn 及其子域名都可以获取这个 cookie,
即域名A和域名B都可以获取这个 cookie。&lt;/li>
&lt;li>如果域名 A 和域名 B 同时设置 cookie 的 doamin 为 f.com.cn, 那么将出现覆盖的现象。&lt;/li>
&lt;li>如果域名 A 没有显式设置 cookie 的 domain 方法, 那么 domain 就为 a.b.f.com.cn, 不一样的是, 这时, 域名 A 的子域名将无法获取这个
cookie。&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;h4 id="特性">特性&lt;/h4>
&lt;h5 id="分类">分类&lt;/h5>
&lt;ol>
&lt;li>会话级别cookie: 所谓会话级别cookie, 就是在浏览器关闭之后cookie就会失效。&lt;/li>
&lt;li>持久级别cookie: 保存在硬盘的cookie, 只要设置了过期时间就是硬盘级别cookie。&lt;/li>
&lt;/ol>
&lt;h5 id="特点">特点&lt;/h5>
&lt;ol>
&lt;li>域和路径：cookie 不可跨域, cookie可以跨越同域名下的多个网页, 实现跨页面全局变量。&lt;/li>
&lt;li>时间：Cookie 的默认有效期理论上在用户关闭页面后就失效, 实际上在在20分钟左右,
不同浏览器策略不同。但是后端可以强制设置有效期(如何设置见下文)。&lt;/li>
&lt;li>空间：cookie存在客户端, 只能存储4kb。&lt;/li>
&lt;li>数量：一个浏览器针每个域最多存 20 个cookie, 浏览器一般只允许存放 300 个cookie。&lt;/li>
&lt;li>储存类型：cookie只能存储字符串。&lt;/li>
&lt;li>无感知: cookie 可以借助 HTTP 头、浏览器的能力做到做到前端无感知传输数据。&lt;/li>
&lt;/ol>
&lt;h5 id="缺点">缺点&lt;/h5>
&lt;ol>
&lt;li>不安全性——cookie很容易被用户篡改。(session 可以解决这个问题, 防止用户篡改)&lt;/li>
&lt;li>储存空间——cookie存储空间很小。(只有4kb左右)&lt;/li>
&lt;li>数量有限——一个浏览器针每个域最多存 20 个cookie, 浏览器一般只允许存放 300 个cookie。&lt;/li>
&lt;li>cookie可能被客户禁用。&lt;/li>
&lt;/ol>
&lt;h4 id="应用场景">应用场景&lt;/h4>
&lt;ul>
&lt;li>cookie的主要应用场景是以下三方面：
&lt;ul>
&lt;li>会话状态管理(如用户登录状态、购物车、游戏分数或其它需要记录的信息)&lt;/li>
&lt;li>个性化设置(如用户自定义设置、主题等)&lt;/li>
&lt;li>浏览器行为跟踪(如跟踪分析用户行为等)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>ex：用户登录识别(实际会更谨慎)&lt;/p>
&lt;ol>
&lt;li>用户 A 用浏览器访问了 &lt;a href="http://a.com">http://a.com&lt;/a>, 那么 &lt;a href="http://a.com">http://a.com&lt;/a> 的服务器就会立刻给 A 返回一段数据「uid=1」(cookie)。&lt;/li>
&lt;li>A 把这段数据「uid=1」(cookie)储存在本地。&lt;/li>
&lt;li>当 A 再次访问 &lt;a href="http://a.com">http://a.com&lt;/a> 的其他页面时, 就会附带上「uid=1」这段数据。&lt;/li>
&lt;li>这样服务端就能识别 A 用户的具体信息。&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;h4 id="需要注意的问题">需要注意的问题&lt;/h4>
&lt;ul>
&lt;li>因为存储在客户端，容易被客户端篡改，使用前需要验证合法性&lt;/li>
&lt;li>不要存储敏感数据，比如用户密码，账户余额&lt;/li>
&lt;li>使用 httpOnly 在一定程度上提高安全性&lt;/li>
&lt;li>尽量减少 cookie 的体积，能存储的数据量不能超过 4kb&lt;/li>
&lt;li>设置正确的 domain 和 path，减少数据传输&lt;/li>
&lt;li>cookie 无法跨域(关于 cookie 跨域可以看一下 withCredentials)&lt;/li>
&lt;li>一个浏览器针对一个网站最多存 20 个 cookie，浏览器一般只允许存放 300 个 cookie&lt;/li>
&lt;li>移动端对 cookie 的支持不是很好，而 session 需要基于 cookie 实现，所以移动端常用的是 token&lt;/li>
&lt;/ul>
&lt;h3 id="session">Session&lt;/h3></description></item></channel></rss>