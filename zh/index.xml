<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>CORNER</title><link>https://trip.noimpty.love/zh/</link><description>Recent content on CORNER</description><generator>Hugo -- gohugo.io</generator><language>zh</language><managingEditor>celeste.anchor@gmail.com (trip.)</managingEditor><webMaster>celeste.anchor@gmail.com (trip.)</webMaster><copyright>2023 GuangzhengLi All rights reserved</copyright><lastBuildDate>Wed, 17 Jan 2024 21:23:15 +0800</lastBuildDate><atom:link href="https://trip.noimpty.love/zh/index.xml" rel="self" type="application/rss+xml"/><item><title>JWT 的前世今生</title><link>https://trip.noimpty.love/zh/blog/zh/jwt%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/</link><pubDate>Wed, 17 Jan 2024 21:23:15 +0800</pubDate><author>celeste.anchor@gmail.com (trip.)</author><guid>https://trip.noimpty.love/zh/blog/zh/jwt%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/</guid><description>&lt;h1 id="jwt-的前世今生">JWT 的前世今生&lt;/h1>
&lt;h2 id="发展史">发展史&lt;/h2>
&lt;ul>
&lt;li>在 Web 发展史中, 浏览器和服务器之间的是通过 HTTP 协议交流的, 但 HTTP 协议最重要的特点之一就是无状态&lt;/li>
&lt;li>最开始 Web 基本就是文档的浏览, 所以服务端无需知道是谁在请求, 客户端每次请求都是一个新的 HTTP 协议&lt;/li>
&lt;li>随着交互式 Web 应用的兴起, 例如购物商城网站, 社区形式的网站… 都是这些需要登录的网站, 我们要知道哪些人买了哪些商品,
哪些人往自己的购物车放了哪些商品…&lt;/li>
&lt;li>由于 HTTP 是无状态的协议, 一旦客户端和服务器的数据交换完毕, 就会断开连接, 再次请求, 会重新连接,
这就说明服务器单从网络连接上是没有办法知道用户身份的。为了解决这个问题, 就给每次新的用户请求时, 发一个身份证,
每次访问都要带上身份证, 这样服务器就知道是谁来访问了, 针对不同的用户做出不同的响应。&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>会话跟踪是Web程序中常用的技术, 用来跟踪用户的整个会话。
常用的会话跟踪技术是Cookie与Session。Cookie 通过在客户端记录信息确定用户身份, Session 通过在服务器端记录信息确定用户身份。&lt;/p>
&lt;/blockquote>
&lt;h2 id="cookid-和-session">Cookid 和 Session&lt;/h2>
&lt;h3 id="cookie">Cookie&lt;/h3>
&lt;ul>
&lt;li>HTTP Cookie(也叫 Web Cookie或浏览器 Cookie)是服务器发送到用户浏览器并保存在本地的一小块数据,
它会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上。&lt;/li>
&lt;li>通常, 它用于告知服务端两个请求是否来自同一浏览器, 如保持用户的登录状态。Cookie 使基于无状态的 HTTP 协议记录稳定的状态信息成为了可能&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>cookie 是浏览器访问服务器后, 服务器传给浏览器的一段数据, 是浏览器提供的一种机制。
浏览器需要保存这段数据, 不得轻易删除。
此后每次浏览器访问该服务器, 都必须带上这段数据。&lt;/p>
&lt;/blockquote>
&lt;h4 id="创建和删除">创建和删除&lt;/h4>
&lt;ul>
&lt;li>当前 Cookie 有两个版本, 分别对应两种设置响应头&lt;code>Set-Cookie&lt;/code>和&lt;code>Set-Cookie2&lt;/code>。&lt;/li>
&lt;li>在 Servlet 中并不支持 &lt;code>Set-Cookie2&lt;/code>, 所以这里只说 &lt;code>Set-Cookie&lt;/code>(详见Set-Cookie
MDN)：&lt;code>Set-Cookie: value[; expires=date][; domain=domain][; path=path][; secure]&lt;/code>&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>属性&lt;/th>
&lt;th style="text-align:center">属性介绍&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Set-Cookie: &lt;!-- raw HTML omitted -->=&lt;!-- raw HTML omitted -->&lt;/td>
&lt;td style="text-align:center">1.键值对, 可以设置保存的 Key/Value, 这里 NAME 不能和其他属性项名字一样 &lt;!-- raw HTML omitted -->2. name=value 键值对, 设置 cookie 的名称及相对应的值, 都必须是字符串类型,如果值为 Unicode 字符, 需要为字符编码。如果值为二进制数据, 则需要使用 BASE64 编码。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Set-Cookie: &lt;!-- raw HTML omitted -->=&lt;!-- raw HTML omitted -->; Expires=&lt;!-- raw HTML omitted -->&lt;/td>
&lt;td style="text-align:center">过期时间, 在这个时间点后 cookie 失效, 形式为符合 HTTP-date 规范的时间戳&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Set-Cookie: &lt;!-- raw HTML omitted -->=&lt;!-- raw HTML omitted -->; Max-Age=&lt;!-- raw HTML omitted -->&lt;/td>
&lt;td style="text-align:center">1. 在 cookie 失效之前需要经过的秒数。一位或多位非零(1-9)数字。假如二者 (指 Expires 和 Max-Age) 均存在, 那么 Max-Age 优先级更高。&lt;!-- raw HTML omitted -->2. cookie 失效的时间, 单位秒。如果为整数, 则该 cookie 在 maxAge 秒后失效。如果为负数, 该 cookie 为临时 cookie , 关闭浏览器即失效, 浏览器也不会以任何形式保存该 cookie 。如果为 0, 表示删除该 cookie , 默认为 -1。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Set-Cookie: &lt;!-- raw HTML omitted -->=&lt;!-- raw HTML omitted -->; Domain=&lt;!-- raw HTML omitted -->&lt;/td>
&lt;td style="text-align:center">生成cookie域名,指定 cookie 可以送达的主机名。假如没有指定, 那么默认值为当前文档访问地址中的主机部分(但是不包含子域名)。默认是当前域名。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Set-Cookie: &lt;!-- raw HTML omitted -->=&lt;!-- raw HTML omitted -->; Path=&lt;!-- raw HTML omitted -->&lt;/td>
&lt;td style="text-align:center">cookie 在哪个路径(路由)下生效, 指定一个 URL 路径, 默认是 ‘/’。如果设置为 /abc, 则只有 /abc 下的路由可以访问到该 cookie, 如：/abc/read。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Set-Cookie: &lt;!-- raw HTML omitted -->=&lt;!-- raw HTML omitted -->; Secure&lt;/td>
&lt;td style="text-align:center">加密设置, cookie只有在请求使用安全协议SSL或者HTTPS的时候才会被发送到服务器；默认为false。(注意：非安全站点(http:)已经不能再在 cookie 中设置 secure 指令了)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Set-Cookie: &lt;!-- raw HTML omitted -->=&lt;!-- raw HTML omitted -->; HttpOnly&lt;/td>
&lt;td style="text-align:center">1. 设置了 HttpOnly 属性的 cookie 不能使用 JavaScript 经由 Document.cookie 属性、XMLHttpRequest 和 RequestAPIs 进行访问, 以防范跨站脚本攻击(XSS)。&lt;!-- raw HTML omitted -->2. 如果给某个 cookie 设置了 httpOnly 属性, 但还是能通过 Application 中手动修改 cookie, 所以只是在一定程度上可以防止 XSS 攻击, 不是绝对的安全.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h5 id="创建">创建&lt;/h5>
&lt;ol>
&lt;li>通过 &lt;code>Set-Cookie&lt;/code> 响应头创建
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Java" data-lang="Java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#66d9ef">true&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> response.&lt;span style="color:#a6e22e">setHeader&lt;/span>(&lt;span style="color:#960050;background-color:#1e0010">&amp;#39;&lt;/span>Set&lt;span style="color:#f92672">-&lt;/span>Cookie&lt;span style="color:#960050;background-color:#1e0010">&amp;#39;&lt;/span>, &lt;span style="color:#960050;background-color:#1e0010">`&lt;/span>login_email&lt;span style="color:#f92672">=&lt;/span>${email}&lt;span style="color:#960050;background-color:#1e0010">`&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> response.&lt;span style="color:#a6e22e">statusCode&lt;/span> &lt;span style="color:#f92672">=&lt;/span> 200
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> response.&lt;span style="color:#a6e22e">write&lt;/span>(&lt;span style="color:#960050;background-color:#1e0010">&amp;#39;&lt;/span>success&lt;span style="color:#960050;background-color:#1e0010">&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>node 中的 cookie 操作
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Shell" data-lang="Shell">&lt;span style="display:flex;">&lt;span>const Koa &lt;span style="color:#f92672">=&lt;/span> require&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#39;koa&amp;#39;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>const Router &lt;span style="color:#f92672">=&lt;/span> require&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#39;koa-router&amp;#39;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>const static &lt;span style="color:#f92672">=&lt;/span> require&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#39;koa-static&amp;#39;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>const app &lt;span style="color:#f92672">=&lt;/span> new Koa&lt;span style="color:#f92672">()&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>const router &lt;span style="color:#f92672">=&lt;/span> new Router&lt;span style="color:#f92672">()&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>app.use&lt;span style="color:#f92672">(&lt;/span>static&lt;span style="color:#f92672">(&lt;/span>__dirname,&lt;span style="color:#e6db74">&amp;#39;/&amp;#39;&lt;/span>&lt;span style="color:#f92672">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>router.get&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#39;/&amp;#39;&lt;/span>,async ctx&lt;span style="color:#f92672">=&lt;/span>&amp;gt;&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> //观察cookie存在
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> console.log&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#39;cookie:&amp;#39;&lt;/span>,ctx.header.cookie&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> //设置cookie
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ctx.set&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#39;Set-Cookie&amp;#39;&lt;/span>,&lt;span style="color:#e6db74">&amp;#39;cookie1=1234&amp;#39;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">})&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>app.use&lt;span style="color:#f92672">(&lt;/span>router.routes&lt;span style="color:#f92672">())&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>app.listen&lt;span style="color:#f92672">(&lt;/span>1024,&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">=&lt;/span>&amp;gt; &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> console.log&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#39;1024已开启&amp;#39;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">})&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>Javascript 操作 cookie
&lt;ul>
&lt;li>目前 document.cookie 对 cookie 的操作很不友好, 所以在项目中一般会引入第三方插件库来操作 cookie&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Javascript" data-lang="Javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">dates&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">new&lt;/span> Date();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">dates&lt;/span>.&lt;span style="color:#a6e22e">setDate&lt;/span>(&lt;span style="color:#a6e22e">dates&lt;/span>.&lt;span style="color:#a6e22e">getDate&lt;/span>()&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">3&lt;/span>); &lt;span style="color:#75715e">// 按天数设置
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>document.&lt;span style="color:#a6e22e">cookie&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">”&lt;/span>&lt;span style="color:#a6e22e">user1&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#a6e22e">YY&lt;/span>; &lt;span style="color:#a6e22e">expires&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">”&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#a6e22e">dates&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="..%2F..%2F..%2Fstatic%2Fimages%2FJWT%2Fcookie_add.png" alt="cookie_add.png">&lt;/p>
&lt;h5 id="删除">删除&lt;/h5>
&lt;ul>
&lt;li>修改 cookie 有效期, 使有效期早于当前时间, 就可以删除 cookie
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Javascript" data-lang="Javascript">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">delete_cookie&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span>(&lt;span style="color:#a6e22e">name&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> document.&lt;span style="color:#a6e22e">cookie&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#39;=;expires=Thu, 01 Jan 1970 00:00:01 GMT;&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h4 id="domain-的应用">Domain 的应用&lt;/h4>
&lt;ul>
&lt;li>以公司内部统一 Auth 登录中心为例&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>假设现在有两个域名：&lt;/p>
&lt;ul>
&lt;li>域名 A: a.test.f.com.cn&lt;/li>
&lt;li>域名 B: b.test.f.com.cn&lt;/li>
&lt;/ul>
&lt;p>显然, 域名 A 和域名 B 都是 f.com.cn 的子域名&lt;/p>
&lt;ol>
&lt;li>如果我们在域名 A 中的 cookie 的domain设置为 f.com.cn, 那么 f.com.cn 及其子域名都可以获取这个 cookie,
即域名A和域名B都可以获取这个 cookie。&lt;/li>
&lt;li>如果域名 A 和域名 B 同时设置 cookie 的 doamin 为 f.com.cn, 那么将出现覆盖的现象。&lt;/li>
&lt;li>如果域名 A 没有显式设置 cookie 的 domain 方法, 那么 domain 就为 a.b.f.com.cn, 不一样的是, 这时, 域名 A 的子域名将无法获取这个
cookie。&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;h4 id="特性">特性&lt;/h4>
&lt;h5 id="分类">分类&lt;/h5>
&lt;ol>
&lt;li>会话级别cookie: 所谓会话级别cookie, 就是在浏览器关闭之后cookie就会失效。&lt;/li>
&lt;li>持久级别cookie: 保存在硬盘的cookie, 只要设置了过期时间就是硬盘级别cookie。&lt;/li>
&lt;/ol>
&lt;h5 id="特点">特点&lt;/h5>
&lt;ol>
&lt;li>域和路径：cookie 不可跨域, cookie可以跨越同域名下的多个网页, 实现跨页面全局变量。&lt;/li>
&lt;li>时间：Cookie 的默认有效期理论上在用户关闭页面后就失效, 实际上在在20分钟左右,
不同浏览器策略不同。但是后端可以强制设置有效期(如何设置见下文)。&lt;/li>
&lt;li>空间：cookie存在客户端, 只能存储4kb。&lt;/li>
&lt;li>数量：一个浏览器针每个域最多存 20 个cookie, 浏览器一般只允许存放 300 个cookie。&lt;/li>
&lt;li>储存类型：cookie只能存储字符串。&lt;/li>
&lt;li>无感知: cookie 可以借助 HTTP 头、浏览器的能力做到做到前端无感知传输数据。&lt;/li>
&lt;/ol>
&lt;h5 id="缺点">缺点&lt;/h5>
&lt;ol>
&lt;li>不安全性——cookie很容易被用户篡改。(session 可以解决这个问题, 防止用户篡改)&lt;/li>
&lt;li>储存空间——cookie存储空间很小。(只有4kb左右)&lt;/li>
&lt;li>数量有限——一个浏览器针每个域最多存 20 个cookie, 浏览器一般只允许存放 300 个cookie。&lt;/li>
&lt;li>cookie可能被客户禁用。&lt;/li>
&lt;/ol>
&lt;h4 id="应用场景">应用场景&lt;/h4>
&lt;ul>
&lt;li>cookie的主要应用场景是以下三方面：
&lt;ul>
&lt;li>会话状态管理(如用户登录状态、购物车、游戏分数或其它需要记录的信息)&lt;/li>
&lt;li>个性化设置(如用户自定义设置、主题等)&lt;/li>
&lt;li>浏览器行为跟踪(如跟踪分析用户行为等)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>ex：用户登录识别(实际会更谨慎)&lt;/p>
&lt;ol>
&lt;li>用户 A 用浏览器访问了 &lt;a href="http://a.com">http://a.com&lt;/a>, 那么 &lt;a href="http://a.com">http://a.com&lt;/a> 的服务器就会立刻给 A 返回一段数据「uid=1」(cookie)。&lt;/li>
&lt;li>A 把这段数据「uid=1」(cookie)储存在本地。&lt;/li>
&lt;li>当 A 再次访问 &lt;a href="http://a.com">http://a.com&lt;/a> 的其他页面时, 就会附带上「uid=1」这段数据。&lt;/li>
&lt;li>这样服务端就能识别 A 用户的具体信息。&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;h4 id="需要注意的问题">需要注意的问题&lt;/h4>
&lt;ul>
&lt;li>因为存储在客户端，容易被客户端篡改，使用前需要验证合法性&lt;/li>
&lt;li>不要存储敏感数据，比如用户密码，账户余额&lt;/li>
&lt;li>使用 httpOnly 在一定程度上提高安全性&lt;/li>
&lt;li>尽量减少 cookie 的体积，能存储的数据量不能超过 4kb&lt;/li>
&lt;li>设置正确的 domain 和 path，减少数据传输&lt;/li>
&lt;li>cookie 无法跨域(关于 cookie 跨域可以看一下 withCredentials)&lt;/li>
&lt;li>一个浏览器针对一个网站最多存 20 个 cookie，浏览器一般只允许存放 300 个 cookie&lt;/li>
&lt;li>移动端对 cookie 的支持不是很好，而 session 需要基于 cookie 实现，所以移动端常用的是 token&lt;/li>
&lt;/ul>
&lt;h3 id="session">Session&lt;/h3></description></item><item><title>CSS 基础</title><link>https://trip.noimpty.love/zh/blog/zh/css/</link><pubDate>Wed, 10 Jan 2024 15:31:50 +0800</pubDate><author>celeste.anchor@gmail.com (trip.)</author><guid>https://trip.noimpty.love/zh/blog/zh/css/</guid><description>&lt;h1 id="css">CSS&lt;/h1>
&lt;h2 id="常见样式声明">常见样式声明&lt;/h2>
&lt;h2 id="选择器">选择器&lt;/h2>
&lt;h2 id="层叠">层叠&lt;/h2>
&lt;h2 id="继承">继承&lt;/h2>
&lt;h2 id="属性值计算过程">属性值计算过程&lt;/h2>
&lt;h2 id="盒模型">盒模型&lt;/h2>
&lt;blockquote>
&lt;p>box: 盒子, 每个元素在页面中都会生成一个矩形区域(盒子)&lt;/p>
&lt;/blockquote>
&lt;h3 id="盒子类型">盒子类型&lt;/h3>
&lt;ul>
&lt;li>行盒: &lt;code>display&lt;/code>属性为&lt;code>inline&lt;/code>的元素&lt;/li>
&lt;li>块盒: &lt;code>display&lt;/code>属性为&lt;code>block&lt;/code>的元素&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>行盒在页面中不换行, 块盒独占一行&lt;/p>
&lt;/blockquote>
&lt;h3 id="默认样式">默认样式&lt;/h3>
&lt;ul>
&lt;li>浏览器默认样式表设置的块盒: 容器元素、h1 ~ h6、p&lt;/li>
&lt;li>常见的行盒: &lt;code>span、a、img、video、audio&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="块盒盒模型">块盒盒模型&lt;/h3>
&lt;h4 id="盒子的组成部分">盒子的组成部分&lt;/h4>
&lt;ul>
&lt;li>无论是行盒还是块盒, 都有一下几个部分组成, 由内至外分别是:
&lt;ol>
&lt;li>内容&lt;code>content&lt;/code>: &lt;code>width、height&lt;/code> 设置的是盒子内容的宽高, 内容部分通常叫做整个盒子的&lt;strong>内容盒 content-box&lt;/strong>&lt;/li>
&lt;li>填充&lt;code>padding&lt;/code>: 盒子边框到盒子内容的距离&lt;code>padding-top、padding-right、padding-bottom、padding-left&lt;/code>(
简写: &lt;code>padding: top、right、bottom、left&lt;/code>), 填充区 + 内容区 = &lt;strong>填充盒 padding-box&lt;/strong>&lt;/li>
&lt;li>边框&lt;code>border&lt;/code>: 边框 = 边框样式&lt;code>border-style&lt;/code> + 边框宽度&lt;code>border-width&lt;/code> + 边框颜色&lt;code>border-color&lt;/code>, 边框 + 填充区 +
内容区 = &lt;strong>边框盒 border-box&lt;/strong>&lt;/li>
&lt;li>外边距&lt;code>margin&lt;/code>: 边框到其他盒子的距离&lt;code>margin-top、margin-right、margin-bottom、margin-left&lt;/code>(
简写: &lt;code>margin: top、right、bottom、left&lt;/code>)&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;h4 id="应用">应用&lt;/h4>
&lt;h5 id="1改变宽高范围">1、改变宽高范围&lt;/h5>
&lt;ul>
&lt;li>默认情况下, &lt;code>width&lt;/code> 和 &lt;code>height&lt;/code> 设置的是内容盒宽高&lt;/li>
&lt;li>衡量设计稿尺寸时, 通常使用的是边框盒, 但设置&lt;code>width&lt;/code>和&lt;code>height&lt;/code>改变的是内容盒
&lt;ol>
&lt;li>精确计算&lt;/li>
&lt;li>CSS3: &lt;code>box-sizing&lt;/code>, 即设置改变宽高的影响范围, ex: &lt;code>box-sizing: border-box&lt;/code>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;h5 id="2改变背景覆盖范围">2、改变背景覆盖范围&lt;/h5>
&lt;ul>
&lt;li>默认情况下, 背景覆盖边框盒, 可以通过&lt;code>background-clip&lt;/code>进行修改, &lt;code>background-clip&lt;/code>
包含三种类型&lt;code>border-box、content-box、padding-box&lt;/code>&lt;/li>
&lt;/ul>
&lt;h5 id="3溢出处理">3、溢出处理&lt;/h5>
&lt;ul>
&lt;li>&lt;code>overflow&lt;/code>控制内容溢出边框盒后的处理方式
&lt;ul>
&lt;li>&lt;code>visible&lt;/code>: 可见的&lt;/li>
&lt;li>&lt;code>hidden&lt;/code>: 隐藏&lt;/li>
&lt;li>&lt;code>scroll&lt;/code>: 生成滚动条(&lt;code>overflow-x、overflow-y&lt;/code>可单独控制水平或垂直方向上的滚动条)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h5 id="4断词规则">4、断词规则&lt;/h5>
&lt;ul>
&lt;li>&lt;code>word-break&lt;/code>: 会影响文字的截断换行
&lt;ul>
&lt;li>&lt;code>normal&lt;/code>: CJK 字符(China、Japan、Korea)在文字位置截断, 非 CJK 字符在单词位置截断&lt;/li>
&lt;li>&lt;code>break-all&lt;/code>: 所有字符均在文字位置截断&lt;/li>
&lt;li>&lt;code>keep-all&lt;/code>: 所有字符都在单词(空格)之间截断&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h5 id="5空白处理">5、空白处理&lt;/h5>
&lt;ul>
&lt;li>&lt;code>white-space&lt;/code>: 空白折叠
&lt;ul>
&lt;li>&lt;code>normal&lt;/code>: 进行空白折叠&lt;/li>
&lt;li>&lt;code>pre&lt;/code>: 拒绝空白折叠&lt;/li>
&lt;li>&lt;code>nowrap&lt;/code>: 发生空白折叠且不换行, 配合&lt;code>overflow: hidden&lt;/code>, &lt;code>text-overflow: ellipsis&lt;/code>可以对超出宽度的单行文本进行隐藏(
仅支持单行文本)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="行盒盒模型">行盒盒模型&lt;/h3>
&lt;ul>
&lt;li>常见的盒模型: 包含具体内容的元素, &lt;code>span、strong、em、i、img、video、audio&lt;/code>&lt;/li>
&lt;/ul>
&lt;h4 id="显著特点">显著特点&lt;/h4>
&lt;ol>
&lt;li>盒子沿着内容延伸&lt;/li>
&lt;li>行盒不能设置宽高, 调整行盒的宽高应该使用字体大小、行高、字体类型进行间接调整&lt;/li>
&lt;li>内边距&lt;code>padding&lt;/code>: 水平方向有效, 垂直方向仅影响背景, 不实际占据空间&lt;/li>
&lt;li>边框&lt;code>border&lt;/code>: 水平方向有效, 垂直方向仅影响背景, 不实际占据空间&lt;/li>
&lt;/ol>
&lt;h3 id="行块盒">行块盒&lt;/h3>
&lt;ul>
&lt;li>&lt;code>display&lt;/code>属性为&lt;code>inline-block&lt;/code>的盒子&lt;/li>
&lt;li>不独占一行&lt;/li>
&lt;li>盒模型中所有尺寸都有效&lt;/li>
&lt;/ul>
&lt;h3 id="空白折叠">空白折叠&lt;/h3>
&lt;ul>
&lt;li>发生在行盒(行块盒)内部或行盒(行块盒)之间&lt;/li>
&lt;li>换行书写行盒(行块盒)会产生间隙&lt;/li>
&lt;/ul>
&lt;h3 id="可替换元素和非可替换元素">可替换元素和非可替换元素&lt;/h3>
&lt;ul>
&lt;li>大部分元素, 页面上显示的结果, 取决于元素内容, 称为&lt;strong>非可替换元素&lt;/strong>&lt;/li>
&lt;li>少部分元素, 页面上显示的结果, 取决于元素属性(ex: src), 称为&lt;strong>可替换元素&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h4 id="可替换元素">可替换元素&lt;/h4>
&lt;ul>
&lt;li>&lt;code>img、video、audio&lt;/code>&lt;/li>
&lt;li>绝大部分可替换元素均为行盒&lt;/li>
&lt;li>可替换元素类似于行块盒, 盒模型中所有尺寸都生效&lt;/li>
&lt;/ul>
&lt;h2 id="常规流">常规流&lt;/h2>
&lt;ul>
&lt;li>盒模型: 规定单个盒子的规则&lt;/li>
&lt;li>视觉格式化模型: 页面中的多个盒子排列/布局规则
&lt;ol>
&lt;li>常规流&lt;/li>
&lt;li>浮动&lt;/li>
&lt;li>(绝对)定位&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;h3 id="常规流布局">常规流布局&lt;/h3>
&lt;ul>
&lt;li>常规流、文档流、普通文档流、常规文档流&lt;/li>
&lt;li>所有元素, 默认情况系下, 都属于常规流布局&lt;/li>
&lt;li>总体规则: 块盒独占一行, 行盒水平依次排列&lt;/li>
&lt;/ul>
&lt;h4 id="包含块containing-block">包含块(&lt;code>containing block&lt;/code>)&lt;/h4>
&lt;ul>
&lt;li>每个盒子都有它的包含块, 包含块决定了盒子的排列区域(活动范围)。&lt;/li>
&lt;li>绝大多数的包含块为其父元素的内容盒&lt;/li>
&lt;li>每个块盒的总宽度, 必须刚好等于包含块的宽度&lt;/li>
&lt;/ul>
&lt;h4 id="块盒">块盒&lt;/h4>
&lt;ol>
&lt;li>
&lt;p>每个块盒的总宽度, 必须刚好等于包含块的宽度&lt;/p>
&lt;ul>
&lt;li>宽度默认值是&lt;code>auto&lt;/code>, 吸收剩余空间, &lt;code>margin&lt;/code>的取值也可以是&lt;code>auto&lt;/code>, 默认为 0, width auto &amp;gt; margin auto&lt;/li>
&lt;li>若宽度、边框、内边距、外边距计算后, 仍然有剩余空间, 该剩余空间被&lt;code>margin-right&lt;/code>全部吸收&lt;/li>
&lt;li>在常规流中, 块盒在其包含块中居中, 可以定宽, 然后左右&lt;code>margin&lt;/code>为&lt;code>auto&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>每个块盒垂直方向上的 &lt;code>auto&lt;/code>&lt;/p>
&lt;ul>
&lt;li>&lt;code>height&lt;/code>: &lt;code>auto&lt;/code>, 适应内容高度&lt;/li>
&lt;li>&lt;code>margin&lt;/code>: &lt;code>auto&lt;/code>, 表示 0&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>百分比取值&lt;/p>
&lt;blockquote>
&lt;p>宽度百分比&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;code>padding、width、margin&lt;/code>可以百分比取值, 其所有百分比均相对于包含块的宽度, 与高度无关&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>高度百分比&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>包含块的高度取决于子元素的高度, 设置百分比无效&lt;/li>
&lt;li>包含块的高度不取决于子元素的高度, 百分比相对于父元素高度&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>上下外边距合并&lt;/p>
&lt;ul>
&lt;li>两个常规流块盒, 上下外边距相邻, 会进行合并(使用&lt;code>padding、border&lt;/code>可避免外边距合并)&lt;/li>
&lt;li>两个外边距取最大值&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="浮动">浮动&lt;/h2>
&lt;h3 id="应用场景">应用场景&lt;/h3>
&lt;ul>
&lt;li>文字环绕、横向排列&lt;/li>
&lt;/ul>
&lt;h3 id="属性---float">属性 - float&lt;/h3>
&lt;ul>
&lt;li>&lt;code>left&lt;/code>: 左浮动, 元素靠上靠左排列&lt;/li>
&lt;li>&lt;code>right&lt;/code>: 右浮动, 元素靠上靠右排列&lt;/li>
&lt;li>默认值为&lt;code>none&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="特点">特点&lt;/h3>
&lt;ol>
&lt;li>当一个元素浮动之后, 必定为块盒(更改&lt;code>display&lt;/code>属性为&lt;code>block&lt;/code>)&lt;/li>
&lt;li>浮动元素的包含块, 和常规流一样, 为父元素的内容盒&lt;/li>
&lt;/ol>
&lt;h3 id="尺寸">尺寸&lt;/h3>
&lt;ol>
&lt;li>宽度为&lt;code>auto&lt;/code>时, 适应内容宽度&lt;/li>
&lt;li>高度为&lt;code>auto&lt;/code>时, 与常规流一致, 适应内容高度&lt;/li>
&lt;li>&lt;code>margin&lt;/code>为&lt;code>auto&lt;/code>时, 为 0&lt;/li>
&lt;li>边框、内边距百分比设置与常规流一样&lt;/li>
&lt;/ol>
&lt;h3 id="盒子排列">盒子排列&lt;/h3>
&lt;ol>
&lt;li>左浮动的盒子靠上靠左排列&lt;/li>
&lt;li>右浮动的盒子靠上靠右排列&lt;/li>
&lt;li>浮动盒子在包含块中排列时, 会避开常规流块盒&lt;/li>
&lt;li>常规流块盒在排列时, 无视浮动盒子&lt;/li>
&lt;li>行盒在排列时, 会避开浮动盒子&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>如果文字没有在行盒中, 浏览器会自动生成一个行盒包裹文字, 该行盒叫做匿名行盒&lt;/p>
&lt;/blockquote>
&lt;h3 id="高度坍塌">高度坍塌&lt;/h3>
&lt;h4 id="根源">根源&lt;/h4>
&lt;ul>
&lt;li>常规流盒子的自动高度, 在计算时, 不会考虑浮动盒子&lt;/li>
&lt;/ul>
&lt;h4 id="解决方案">解决方案&lt;/h4>
&lt;ul>
&lt;li>清除浮动, 涉及&lt;code>CSS&lt;/code>属性: &lt;code>clear&lt;/code>
&lt;ul>
&lt;li>默认值: &lt;code>none&lt;/code>&lt;/li>
&lt;li>&lt;code>left&lt;/code>: 清除左浮动, 该元素必须出现在前面所有左浮动盒子的下方&lt;/li>
&lt;li>&lt;code>right&lt;/code>: 清除右浮动, 该元素必须出现在前面所有右浮动盒子的下方&lt;/li>
&lt;li>&lt;code>both&lt;/code>: 清除左右浮动, 该元素必须出现在前面所有浮动盒子的下方&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h5 id="添加空元素">添加空元素&lt;/h5>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">style&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#a6e22e">item&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">width&lt;/span>: &lt;span style="color:#ae81ff">100&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">height&lt;/span>: &lt;span style="color:#ae81ff">100&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">background-color&lt;/span>: &lt;span style="color:#66d9ef">red&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">margin&lt;/span>: &lt;span style="color:#ae81ff">10&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#a6e22e">clearfix&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">clear&lt;/span>: &lt;span style="color:#66d9ef">both&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#f92672">style&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">body&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">div&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;container&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">div&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;item&amp;#34;&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">div&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;item&amp;#34;&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">div&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;item&amp;#34;&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">div&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;clearfix&amp;#34;&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#f92672">body&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="添加伪元素选择器">添加伪元素选择器&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">style&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#a6e22e">item&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">width&lt;/span>: &lt;span style="color:#ae81ff">100&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">height&lt;/span>: &lt;span style="color:#ae81ff">100&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">background-color&lt;/span>: &lt;span style="color:#66d9ef">red&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">margin&lt;/span>: &lt;span style="color:#ae81ff">10&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#a6e22e">clearfix&lt;/span>::&lt;span style="color:#a6e22e">after&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">content&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">display&lt;/span>: &lt;span style="color:#66d9ef">block&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">clear&lt;/span>: &lt;span style="color:#66d9ef">both&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">float&lt;/span>: &lt;span style="color:#66d9ef">left&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#f92672">style&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">body&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">div&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;container clearfix&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">div&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;item&amp;#34;&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">div&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;item&amp;#34;&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">div&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;item&amp;#34;&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#f92672">body&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="定位">定位&lt;/h2>
&lt;ul>
&lt;li>手动控制元素在包含块中的精准位置&lt;/li>
&lt;li>涉及&lt;code>CSS&lt;/code>属性: &lt;code>position&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="属性">属性&lt;/h3>
&lt;ul>
&lt;li>&lt;code>static&lt;/code>: 静态定位(不定位)&lt;/li>
&lt;li>&lt;code>relative&lt;/code>: 相对定位&lt;/li>
&lt;li>&lt;code>absolute&lt;/code>: 绝对定位&lt;/li>
&lt;li>&lt;code>fixed&lt;/code>: 固定定位&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>一个元素, 只要&lt;code>position&lt;/code>的取值不是&lt;code>static&lt;/code>, 认为该元素是一个定位元素, 除相对定位以外的定位元素会脱离文档流&lt;/p>
&lt;blockquote>
&lt;ol>
&lt;li>文档流中的元素摆放时, 会忽略脱离了文档流的元素&lt;/li>
&lt;li>文档流中元素计算自动高度时, 会忽略脱离了文档流的元素&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;/blockquote>
&lt;h3 id="相对定位">相对定位&lt;/h3>
&lt;ul>
&lt;li>不会导致元素脱离文档流, 只是让元素在原来位置上进行偏移&lt;/li>
&lt;li>可以通过四个&lt;code>CSS&lt;/code>属性对其位置进行偏移: &lt;code>left、right、top、bottom&lt;/code>&lt;/li>
&lt;li>盒子的偏移不会对其他盒子造成任何影响&lt;/li>
&lt;li>为绝对定位的元素提供包含块&lt;/li>
&lt;/ul>
&lt;h3 id="绝对定位">绝对定位&lt;/h3>
&lt;ol>
&lt;li>宽高为&lt;code>auto&lt;/code>, 盒子尺寸适应内容&lt;/li>
&lt;li>包含块变化: 寻找其所有父元素中的第一个定位元素, 该元素的填充盒为其包含块。若不存在, 则它的包含块为整个网页(
初始化包含块)&lt;/li>
&lt;/ol>
&lt;h3 id="固定定位">固定定位&lt;/h3>
&lt;ul>
&lt;li>除包含块以外, 均与绝对定位相同&lt;/li>
&lt;li>固定定位的包含块, 固定为浏览器的可视窗口(视口)&lt;/li>
&lt;/ul>
&lt;h3 id="定位下的居中">定位下的居中&lt;/h3>
&lt;ul>
&lt;li>某个方向居中
&lt;ol>
&lt;li>定宽/高&lt;/li>
&lt;li>将左右/上下距离设置为 0&lt;/li>
&lt;li>将左右/上下&lt;code>margin&lt;/code>设置为&lt;code>auto&lt;/code>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>在绝对定位和固定定位中, &lt;code>margin&lt;/code>为&lt;code>auto&lt;/code>时, 会自动吸收剩余空间&lt;/li>
&lt;/ul>
&lt;h3 id="多个定位元素重叠">多个定位元素重叠&lt;/h3>
&lt;ul>
&lt;li>堆叠上下文: 设置&lt;code>z-index&lt;/code>, 通常情况下, 该值越大, 越靠近用户&lt;/li>
&lt;li>只有定位元素设置&lt;code>z-index&lt;/code>有效&lt;/li>
&lt;li>&lt;code>z-index&lt;/code>可以是负数, 如果是负数, 则遇到常规流、浮动元素, 则会被其覆盖&lt;/li>
&lt;/ul>
&lt;h3 id="补充">补充&lt;/h3>
&lt;ul>
&lt;li>绝对定位、固定定位元素一定是块盒&lt;/li>
&lt;li>绝对定位、固定定位元素一定不是浮动&lt;/li>
&lt;li>没有外边距合并&lt;/li>
&lt;/ul></description></item></channel></rss>